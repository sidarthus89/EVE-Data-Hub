// üì¶ itemDispatcher.js
// Handles item selection, triggers order/history/chart updates

import { selectItem } from "./itemViewer.js";
import { fetchMarketOrders } from "./marketTables.js";
import { fetchMarketHistory } from "./itemPriceHistory.js";
import {
    renderScopedHistoryChart,
} from "./historyChart_Slider.js";
import { appState } from "./marketConfig.js";
import { setHistoryViewActive } from "./itemPriceHistory.js";
import { RegionSelector } from "../../globals/js/regionSelector.js";

export async function handleItemSelection(typeID) {
    if (!typeID || isNaN(typeID)) return;

    // üéØ Store selected typeID in appState for shared access
    appState.selectedTypeID = typeID;
    selectItem(typeID);

    // üßº Show the viewer header
    const viewerHeader = document.getElementById('itemViewerHeader');
    if (viewerHeader) {
        viewerHeader.classList.remove('hidden');
        viewerHeader.style.display = 'flex';
    }

    // üß© Show both panels before toggling
    document.getElementById('itemPriceTables')?.classList.remove('hidden');
    document.getElementById('itemHistorySection')?.classList.remove('hidden');

    // üß≠ Derive region context
    const { region, regionID } = RegionSelector.getRegionSummary();
    const regionName = region || 'all';

    // üîß Ensure valid IDs passed to chart toggle logic
    if (regionID && typeID) {
        setHistoryViewActive(false, regionID, typeID);
    }


    // ‚úÖ Fetch market orders for clicked item
    try {
        await fetchMarketOrders(typeID, regionName);
    } catch (err) {
        console.warn(`‚ùå Market orders failed for item ${typeID} in region "${regionName}":`, err);
        return;
    }

    // üìä If user is viewing history, load chart + sync slider
    const isHistoryVisible = document.getElementById('itemHistorySection')?.classList.contains('visible');
    if (isHistoryVisible) {
        try {
            await fetchMarketHistory(typeID, regionName);
            renderScopedHistoryChart(regionID, typeID);
        } catch (err) {
            console.warn(`‚ùå Price history failed for ${typeID} in "${regionName}":`, err);
        }
    }
}
