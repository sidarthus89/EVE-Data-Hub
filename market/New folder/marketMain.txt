// 🧭 Market Globals
import { APP_CONFIG, appState, elements } from './marketConfig.js';
import { handleItemSelection } from './itemDispatcher.js';
import { cacheElements } from './marketUtilities.js';

// 🧱 Initial Loaders
import { loadRegions, loadStations, loadMarketMenu } from './marketDataFetcher.js';
import { loadTickerData } from './marketTicker.js';
import { fetchMarketOrders } from './marketTables.js';

// 📦 UI & Interaction Modules
import { initializeMarketMenu } from './marketTree.js';
import { setupEventListeners } from './marketEvents.js';
import { renderQuickbar } from './marketQuickbar.js';
import { initializeSearch } from './marketSearch.js';
import { setHistoryViewActive, fetchMarketHistory } from './itemPriceHistory.js';
import {
    renderScopedHistoryChart,
    renderNavigatorChart
} from './historyChart_Slider.js';

// 🌍 Global Location Logic
import { RegionSelector } from '../../globals/js/regionSelector.js';

// 🌐 Expose API Globals
window.appState = appState;
window.APP_CONFIG = APP_CONFIG;
window.handleItemSelection = handleItemSelection;

document.addEventListener('DOMContentLoaded', async () => {
    try {
        // 🌎 Cache DOM Elements
        cacheElements();

        // 🌐 Load Region & Market Data
        await Promise.all([
            loadRegions(),
            loadStations(),
            loadMarketMenu()
        ]);

        // 🧹 Flatten Market Tree for Search Index
        appState.flatItemList = extractItemList(appState.marketMenu);
        appState.selectedTypeID = null;
        localStorage.removeItem('selectedTypeID');

        // 🎛️ Initialize UI Components
        RegionSelector.initializeDropdown();
        initializeMarketMenu();
        renderQuickbar(false);
        setupEventListeners();
        initializeSearch();

        // 📈 Initial Ticker Load
        await loadTickerData();

        // 🖱️ History/Market Tab Switching
        elements.viewMarketLink.addEventListener('click', e => {
            e.preventDefault();

            const regionID = RegionSelector.getRegionID() ?? APP_CONFIG.DEFAULT_REGION_ID;
            const itemID = appState.selectedTypeID;

            setHistoryViewActive(false, regionID, itemID);
        });


        elements.viewHistoryLink.addEventListener('click', async e => {
            e.preventDefault();
            console.log('[📌 Click] View History link clicked');

            const regionID = RegionSelector.getRegionID() ?? APP_CONFIG.DEFAULT_REGION_ID;
            const itemID = appState.selectedTypeID;

            console.log('[🧭 IDs]', { regionID, itemID });

            if (regionID && itemID) {
                setHistoryViewActive(true, regionID, itemID);
            } else {
                console.warn("❌ Cannot activate history view: missing regionID or itemID.");
                return;
            }

            try {
                console.log('[📡 Fetching] Requesting price history...');
                await fetchMarketHistory(itemID, regionID);
                console.log('[DEBUG] Market history after fetch:', appState.marketHistory?.[itemID]);

                appState.selectedTypeID = itemID;

                setTimeout(() => {
                    console.log('[📊 Rendering] Starting chart render...');
                    renderNavigatorChart(itemID);
                    renderScopedHistoryChart(regionID, itemID);
                }, 200);
            } catch (err) {
                console.warn(`❌ History render failed for ${itemID} in region ${regionID}:`, err);
            }
        });



    } catch (err) {
        console.error('Initialization failed:', err);
    }
});

// 🧠 Utility: Flatten Market Tree
function extractItemList(menu) {
    const items = [];
    function walk(node) {
        for (const [key, value] of Object.entries(node)) {
            if (key === '_info') continue;
            if (Array.isArray(value)) {
                items.push(...value);
            } else if (typeof value === 'object' && value !== null) {
                walk(value);
            }
        }
    }
    walk(menu);
    return items.map(i => ({
        type_id: i.typeID,
        name: i.typeName
    }));
}

// Order Fetcher/Refresh
function refreshOrders() {
    const typeID = appState.selectedTypeID;
    const regionName = RegionSelector.getRegionSummary().region || 'all';
    if (typeID) {
        fetchMarketOrders(typeID, regionName);
    }
}
